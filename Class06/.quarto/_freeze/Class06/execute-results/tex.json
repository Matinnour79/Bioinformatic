{
  "hash": "8e368ae7316ec8a6bedd1d4a4b927606",
  "result": {
    "markdown": "---\ntitle: \"Class 06: R functions\"\nauthor: Matin Nourmohammadi\ndate: 2023-04-21\nformat: pdf\neditor_options:\nChunk_output_type: inline\n---\n\n\nIn this class we will develop our own **R function** to calculate average grades in a fictional class.\n\nWe will start with a simplified version of the problem, just calculating the average grade of the student.\n\n# Simplified version\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example input vectors to start with\nstudent1 <- c(100, 100, 100, 100, 100, 100, 100, 90)\nstudent2 <- c(100, NA, 90, 90, 90, 90, 97, 80)\nstudent3 <- c(90, NA, NA, NA, NA, NA, NA, NA)\n```\n:::\n\n\nWe are going to start by calculating the average score of the homework.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 98.75\n```\n:::\n:::\n\n\nTo get the minimum score we can use `which.min`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 100 100 100 100 100 100  90\n```\n:::\n\n```{.r .cell-code}\nwhich.min(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nI can do the average of the first 7 homework scores:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student1[1:7])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\nAnother way to select the first 7 homework:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent1[1:7]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 100 100 100 100 100 100\n```\n:::\n\n```{.r .cell-code}\nstudent1[-8]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 100 100 100 100 100 100\n```\n:::\n:::\n\n\nAnother way to drop the lowest score:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent1_drop_lowest=student1[-which.min(student1)]\nstudent1_drop_lowest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 100 100 100 100 100 100\n```\n:::\n:::\n\n\nI can get the mean of the homework score after dropping the lowest score by doing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student1_drop_lowest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\nWe have our first working snippet of code!\n\nLet's try to generate it to student2:\n\nThere is a way to calculate the mean dropping missing values (or NA).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student2, na.rm= TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 91\n```\n:::\n:::\n\n\nThis looks good for student2. However, for student3...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student3, na.rm= TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n:::\n\n\nWe want to know the position of the NAs. So, for student2, we can use the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(is.na(student2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nfor student 3:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(is.na(student3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 5 6 7 8\n```\n:::\n:::\n\n\nFor considering missing values, we can mask the NA with zeros.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent2[is.na(student2)] <- 0\nstudent2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100   0  90  90  90  90  97  80\n```\n:::\n:::\n\n\nIf I use the same for student 3:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent3[ is.na(student3) ] <- 0\nstudent3_drop_lowest=student3[-which.min(student3)]\nmean(student3_drop_lowest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.85714\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(100,75,50,NA) \nx[is.na(x)] <-0 \nx_drop_lowest <- x[-which.min(x)]   \nmean(x_drop_lowest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 75\n```\n:::\n:::\n\n\n# Function grade\n\nwe can write it as a function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Calculate the average score score for a vector of homework scores, dropping the lowest score, and considering NA values as zeros. \n#'\n#'\n#'\n#'\n#' @param x A numeric vector of homework scores\n#'\n#' @return The average value of homework scores\n#' @export\n#'\n#' @examples\n#' \n#' student <- c('100', '50' NA)\n#' grade(student)\ngrade <- function(x){\n  #Masking the values with zero\n  x[is.na(x)] <-0   \n  #Dropping the lowest score\n  x_drop_lowest <- x[-which.min(x)]   \n  mean(x_drop_lowest)  \n  } \n```\n:::\n\n\nLet's run the function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n student1 <- c(100, 100, 100, 100, 100, 100, 100, 90) \n student2 <- c(100, NA, 90, 90, 90, 90, 97, 80) \n student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)  \n grade(student1) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\n grade(student2) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 91\n```\n:::\n\n```{.r .cell-code}\n grade(student3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.85714\n```\n:::\n:::\n\n\nLet's apply our function to a gradebook from this URL:\n\n\"https://tinyurl.com/gradeinput\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nURL <- 'https://tinyurl.com/gradeinput'\ngradebook <- read.csv(URL, row.names = 1)\nhead(gradebook)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          hw1 hw2 hw3 hw4 hw5\nstudent-1 100  73 100  88  79\nstudent-2  85  64  78  89  78\nstudent-3  83  69  77 100  77\nstudent-4  88  NA  73 100  76\nstudent-5  88 100  75  86  79\nstudent-6  89  78 100  89  77\n```\n:::\n:::\n\n\nLet's apply my function `grade` to the gradebook using `apply` and running it by using `MARGIN=1`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(gradebook, 1, grade)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n student-1  student-2  student-3  student-4  student-5  student-6  student-7 \n     91.75      82.50      84.25      84.25      88.25      89.00      94.00 \n student-8  student-9 student-10 student-11 student-12 student-13 student-14 \n     93.75      87.75      79.00      86.00      91.75      92.25      87.75 \nstudent-15 student-16 student-17 student-18 student-19 student-20 \n     78.75      89.50      88.00      94.50      82.75      82.75 \n```\n:::\n:::\n\n\n## Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(apply(gradebook, 1, grade))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 94.5\n```\n:::\n:::\n\n\nThe maximum score is 94.5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich.max(apply(gradebook, 1, grade))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstudent-18 \n        18 \n```\n:::\n:::\n\n\nThe student getting the maximum overall score was student 18.\n\n## Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?\n\nFirst, we are going to mask the NA values with zeros.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngradebook[is.na(gradebook)] <- 0\n```\n:::\n\n\nNow, we apply the `mean` function to the gradebook.\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(gradebook, 2, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  hw1   hw2   hw3   hw4   hw5 \n89.00 72.80 80.80 85.15 79.25 \n```\n:::\n:::\n\n\nThe toughest homework will be hw2 considering the mean, and considering missing homework as 0.\n\nMaybe having zeros for missing homework is too strict and is not a good representation of the homework difficulty.\n\nOne thing we can do is remove the missing values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngradebook <- read.csv(URL, row.names = 1)\napply(gradebook, 2, mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     hw1      hw2      hw3      hw4      hw5 \n89.00000 80.88889 80.80000 89.63158 83.42105 \n```\n:::\n:::\n\n\nInstead of assigning zeros to missing values, if we directly don't consider missing values, the toughest homework will be hw3 (according to the mean).\n\nIf we use the median instead of the mean as a measure of overall score...\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(gradebook, 2, median, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n hw1  hw2  hw3  hw4  hw5 \n89.0 72.5 76.5 88.0 78.0 \n```\n:::\n:::\n\n\nif we use some plots...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(gradebook)\n```\n\n::: {.cell-output-display}\n![](Class06_files/figure-pdf/unnamed-chunk-25-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Q4. From your analysis of the gradebook, which homework was most predictive of overall score\n\n(i.e. highest correlation with average grade score)?\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverall_grades= apply(gradebook, 1, grade)\noverall_grades\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n student-1  student-2  student-3  student-4  student-5  student-6  student-7 \n     91.75      82.50      84.25      84.25      88.25      89.00      94.00 \n student-8  student-9 student-10 student-11 student-12 student-13 student-14 \n     93.75      87.75      79.00      86.00      91.75      92.25      87.75 \nstudent-15 student-16 student-17 student-18 student-19 student-20 \n     78.75      89.50      88.00      94.50      82.75      82.75 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(gradebook$hw1, overall_grades)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4250204\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngradebook[is.na(gradebook)] <- 0\napply(gradebook, 2, cor, y= overall_grades)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      hw1       hw2       hw3       hw4       hw5 \n0.4250204 0.1767780 0.3042561 0.3810884 0.6325982 \n```\n:::\n:::\n\n\nThe maximum value is\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich.max(apply(gradebook, 2, cor, y= overall_grades))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhw5 \n  5 \n```\n:::\n:::\n\n\nHomework 5 was the most predicted of the overall grade.\n",
    "supporting": [
      "Class06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}